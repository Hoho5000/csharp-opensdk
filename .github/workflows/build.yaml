name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # dotnet-version: ["2.2.103", "3.0", "3.1.x"]
        dotnet-version: ["2.2.103"]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # All history
      - name: Set SDK version
        run: |
          # Tags
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            SDK_VERSION=$(git describe --tags --exact-match)
          else
            PARENT_TAG="$(git describe --tags --abbrev=0 || echo v0.0.0)"
            SDK_VERSION="${PARENT_TAG}.$(git rev-list --all --count)-rc+$(git rev-parse --short HEAD)"
          fi
          if [ "${SDK_VERSION:0:1}" != "v" ]; then
            >&2 echo "Git tag does not start with a 'v'!"
            exit 1;
          fi
          SDK_VERSION="${SDK_VERSION:1}"
          echo "SDK_VERSION=${SDK_VERSION}" >> $GITHUB_ENV
      - name: Set up Dotnet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Restore dependencies
        run: |
          dotnet restore TestProject.OpenSDK.sln
      - name: Build
        run: |
          dotnet build --no-restore /p:Version=${SDK_VERSION} --configuration Release TestProject.OpenSDK.sln
      - name: Run unit-tests
        run: |
          dotnet test --verbosity normal --no-restore --filter UnitTests
      - name: Run flow tests
        run: |
          echo "TODO..."
      - name: Create Nuget packages
        run: |
          dotnet pack --no-restore /p:Version=${SDK_VERSION} --output ${GITHUB_WORKSPACE}/build/out TestProject.OpenSDK.sln
      - name: Archive Nuget packages
        uses: actions/upload-artifact@v2
        with:
          name: nuget-packages
          path: |
            build/out/*.nupkg
      - name: Push to Nuget
        if: startsWith(github.ref, 'refs/tags/v') || startsWith(github.ref, 'refs/heads/main')
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          set -e
          for pkg in build/out/*.nupkg; do
            dotnet nuget push "${pkg}" --api-key "${NUGET_API_KEY}" --source https://api.nuget.org/v3/index.json
          done
